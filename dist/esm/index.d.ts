import * as THREE from 'three';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
declare class InstancedAnimation {
    private vertexAnimationTexture;
    private durationAnimation;
    private originalMesh;
    private tHeight;
    private tWidth;
    private animations;
    private durationSum;
    private animOrder;
    private fullDuration;
    private createdGeometry;
    private createdMaterial;
    private materialShader;
    private instanceCount;
    instancedMesh: THREE.InstancedMesh;
    previewMesh: THREE.Mesh;
    private vertices;
    private uvs;
    private reference;
    private indices;
    private animSpeed;
    private animDuration;
    private animOffset;
    constructor(gltf: GLTF, instanceCount: number);
    private createAnimOrder;
    private getAnimDuration;
    private getAnimOffset;
    private getAnimData;
    private createAnimSpeedAttr;
    private createAnimDurationAttr;
    private createAnimOffsetAttr;
    private createPreviewMesh;
    private getAnimTextureSize;
    private createAnimTexture;
    private createVertices;
    private createUvs;
    private createReferenceAttr;
    private createIndices;
    private setAttributes;
    private createMaterial;
    get shader(): THREE.Shader | undefined;
    private nextPowerOf2;
    private lerp;
    private getGeometry;
    private getMaterial;
    getVertexAnimationTexture: () => THREE.DataTexture | undefined;
    private createInstancedMesh;
    playAnimation(targetIndex: number, animName: string): void;
}
export default InstancedAnimation;
//# sourceMappingURL=index.d.ts.map